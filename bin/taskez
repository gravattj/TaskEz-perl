#!/usr/bin/env perl

# vim: tabstop=4 expandtab

###### PACKAGES ######

use Modern::Perl;
use warnings FATAL => 'all';
use TaskEz;
use Text::ANSITable;
use Scalar::Util qw(looks_like_number);

use Getopt::Long;
Getopt::Long::Configure('no_ignore_case');

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Indent   = 1;

use Data::Printer alias => 'pdump';

###### CONSTANTS ######

use constant ORDER_BY_DEFAULT => ( 'pri', 'insert_epoch' );

use vars qw(%PRIORITY2STR %STR2PRIORITY);

%PRIORITY2STR = (
    1 => 'high',
    2 => 'med',
    3 => 'low',
);

%STR2PRIORITY = (
    h => 1,
    m => 2,
    l => 3,
);

###### GLOBALS ######

use vars qw(
    $Action
    $All
    %Dispatch
    $HoldDur
    $Id
    $OrderBy
    $Priority
    $State
    $TaskEz
    $Title
);

%Dispatch = (
    'add'        => \&add,
    'delete'     => \&delete,
    'done'       => \&done,
    'dump'       => \&dump,
    'hold'       => \&hold,
    'init'       => \&init,
    'list'       => \&list,
    'modify'     => \&modify,
    'pending'    => \&pending,
    'sqlcli'     => \&sqlcli,       # undocumented feature
    'start'      => \&start,
    'upgrade-db' => \&upgrade_db,
    'wip'        => \&wip,
);

###### MAIN ######

parse_cmd_line();
main();

###### END MAIN ######

sub main {

    $TaskEz = TaskEz->new;

    if ( $Dispatch{$Action} ) {
        my $sub = $Dispatch{$Action};
        $sub->();
    }
    else {
        die "unknown action: $Action\n";
    }
}

sub sqlcli {

    my $cmd = sprintf "sqlite3 %s", $TaskEz->get_db_path();
    say $cmd;
    system($cmd);
}

sub dump {

    my $href = $TaskEz->get_row_by_id( id => $Id );
    pdump($href);
}

sub delete {

    check_required( '-i', $Id );

    $TaskEz->delete( id => $Id );
}

sub list {

    my %args;

    $args{order_by} = [ORDER_BY_DEFAULT];

    if ( !$All ) {

        if ($State) {
            $args{state} = $State;

            if ( $State eq 'done' ) {
                $args{order_by} = ['done_epoch'];
            }
        }
        else {
            $args{not_state} = 'done';
        }
    }

    my $rows = $TaskEz->list(%args);

    my $t = new_text_ansitable();
    $t->columns( [qw(pri id title state date)] );

    #    $t->set_column_style( 'id', fgcolor => 'fa8888' );

    foreach my $row (@$rows) {

        my $pri = get_priority( $t, $row->{pri} );

        my $date;

        if ( $row->{done_flag} ) {
            $date = $row->{done_date};
        }
        elsif ( $row->{hold_flag} ) {
            if ( !$row->{hold_until_date} ) {
                $date = 'infinite';
            }
            else {
                $date = $row->{hold_until_date};
            }
        }
        else {
            $date = $row->{insert_date};
        }

        $t->add_row(
            [   $pri,  $row->{rowid}, $row->{title},
                $row->{state}, $date
            ]
        );
    }

    print $t->draw;
}

sub get_priority {
    my $t   = shift;
    my $pri = shift;

    state $last_pri;
    my $pri_name;

    if ( !defined $last_pri) {
        $pri_name = map_priority($pri);     
        $last_pri = $pri;
    }
    elsif ($last_pri != $pri) {
        $pri_name = map_priority($pri);
        $t->add_row_separator();
        $last_pri = $pri;
    }
    else {
        $pri_name = '';
    }

    return $pri_name;
}

sub map_priority {
    my $pri = shift;

    if ( exists $PRIORITY2STR{$pri} ) {
        return $PRIORITY2STR{$pri};
    }
    
    return 'none';
}

sub hold {

    check_required( '-i', $Id );

    my %args;
    $args{id} = $Id;

    if ($HoldDur) {
        if ( $HoldDur =~ /^(\d+)d$/ ) {
            $args{days} = $1;
        }
        else {
            die "unrecognized hold duration\n";
        }
    }

    $TaskEz->hold(%args);
}

sub pending {

    $State = 'pending';
    list();
}

sub wip {

    $State = 'wip';
    list();
}

sub modify {

    check_required( '-i', $Id );
    
    $TaskEz->modify(
        id       => $Id,
        priority => $Priority,
        state    => $State,
    );
}

sub start {

    check_required( '-i', $Id );

    $TaskEz->start( id => $Id );
}

sub done {

    if ($Id) {
        $TaskEz->done( id => $Id );
    }
    else {
        my %args;

        $args{order_by} = ['done_epoch desc'];
        $args{state}    = 'done';

        my $rows = $TaskEz->list(%args);

        my $t = new_text_ansitable();
        $t->columns( [qw(pri id title state date)] );

        foreach my $row (@$rows) {

            $t->add_row(
                [   $row->{pri},   $row->{rowid}, $row->{title},
                    $row->{state}, $row->{done_date}
                ]
            );
        }

        print $t->draw;
    }
}

sub new_text_ansitable {

    my $t = Text::ANSITable->new( use_utf8 => 1, column_wrap => 1 );
    binmode( STDOUT, ":utf8" );
    $t->border_style('Default::singleh_utf8');

    return $t;
}

sub add {

    check_required( '-t', $Title );

    $TaskEz->add( title => $Title, priority => $Priority );
}

sub init {

    $TaskEz->init;
}

sub upgrade_db {

    $TaskEz->upgrade_db;
}

sub unknown_priority {
    my $pri = shift;
    
    printf STDERR "Unrecognized priority.  Known priorities are: %s\n", join(', ', keys %STR2PRIORITY);
    exit 1;    
}

sub normalize_priority {
    my $pri = shift;

    if (!looks_like_number($pri)) {

        foreach my $key (keys %STR2PRIORITY) {

            if ($pri =~ /^$key/i) {
                return $STR2PRIORITY{$key};
            }
        }

        unknown_priority($pri);
    }

    return $pri;
}

sub check_required {
    my $opt = shift;
    my $arg = shift;

    print_usage("missing arg $opt") if !$arg;
}

sub parse_cmd_line {
    my $help;

    GetOptions(
        'all'    => \$All,
        'h=s'    => \$HoldDur,
        'i=s'    => \$Id,
        'p=s'    => \$Priority,
        's=s'    => \$State,
        "t=s"    => \$Title,
        "help|?" => \$help
    );

    print_usage() if $help;

    #check_required( '-e', $Example );

    if (defined $Priority) {
        $Priority = normalize_priority($Priority);
    }

    if ( @ARGV < 1 ) {
        $Action = 'list';
    }
    else {
        $Action = shift @ARGV;
    }
}

sub print_usage {

    my $msg = shift;
    print STDERR "@_\n" if $msg;

    print <<"HERE";

usage: taskez [action] [options]

    actions:  
        add
        delete
        done
        dump
        hold
        init
        list    (default)
        modify
        pending 
        start
        upgrade-db
        wip
           
    options: 
        [--all]
        [-h <hold dur>] (-Xd) 
        [-i <id>]
        [-p <priority>]
        [-s <state>]
        [-t <title>]  
        [-?] (usage)
     
HERE

    exit 1;
}
